// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using blogEngine.DataAccess;

namespace blogEngine.Migrations
{
    [DbContext(typeof(BloggingContext))]
    partial class BloggingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("blogEngine.DataAccess.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new { Id = 1, Name = "William" },
                        new { Id = 2, Name = "Sara" },
                        new { Id = 3, Name = "Kobe" }
                    );
                });

            modelBuilder.Entity("blogEngine.DataAccess.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Author_id");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("blogEngine.DataAccess.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Author_id");

                    b.Property<int>("Blog_id");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Author_id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("blogEngine.DataAccess.Comment", b =>
                {
                    b.HasOne("blogEngine.DataAccess.Author", "Author")
                        .WithMany()
                        .HasForeignKey("Author_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
